# This is a reusable workflow.
# See this page for more info https://docs.github.com/en/actions/using-workflows/reusing-workflows

name: Build iOS app

on:
  workflow_call:

jobs:
  build:
    name: Build iOS
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2 # todo: update all steps/actions
      
    - name: Set up environment
      uses: ./.github/actions/setup_environment

    # - name: Set global environment variables
    #   uses: ./.github/actions/setvars
    #   with:
    #     varFilePath: ./.github/variables/global.env
        
    # - name: Set up Xcode
    #   uses: maxim-lobanov/setup-xcode@v1
    #   with:
    #     xcode-version: ${{ env.XCODE_VERSION }}

    # - name: Set up Flutter
    #   uses: subosito/flutter-action@v2
    #   with:
    #     flutter-version: ${{ env.FLUTTER_VERSION }}

    - name: Prepare signing # todo: migrate to automatic signing & API key
      env:
        PP_KEYCHAIN_PASS: ${{ secrets.KEYCHAIN_PASS }}
        PP_P12_FILE: ${{ secrets.P12_FILE }}
        PP_P12_PASS: ${{ secrets.P12_PASS }}
        PP_PROV_FILE: ${{ secrets.PROV_FILE }}
      run: |
        echo "Convert base64 strings to files"
        echo "$PP_PROV_FILE" >> prov.temp.txt
        echo "$PP_P12_FILE ">> cert.temp.txt
        base64 --decode prov.temp.txt > prov.temp.mobileprovision
        base64 --decode cert.temp.txt > cert.temp.p12

        echo "Copy provisioning file to the correct locations"
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp prov.temp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/prov.mobileprovision

        echo "Create a new keychain & import p12 certificate"
        security create-keychain -p "$PP_KEYCHAIN_PASS" build.keychain
        security import cert.temp.p12 -t agg -k ~/Library/Keychains/build.keychain -P "$PP_P12_PASS" -A

        echo "Set new keychain as a default"
        security list-keychains -s ~/Library/Keychains/build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain
        security unlock-keychain -p "$PP_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "$PP_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain

        echo "Clean up temp files"
        rm *.temp.*

    - name: Build IPA
      env:
        PP_KEYCHAIN_PASS: ${{ secrets.KEYCHAIN_PASS }}
      run: |
        echo "Unlocking keychain"
        security unlock-keychain -p "$PP_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain

        # Important, just in case the build takes longer than the default 300s timeout
        # Otherwise the build will freeze at signing the frameworks if the keychain is locked
        echo "Increasing keychain auto lock timeout"
        security set-keychain-settings -lut 1800 ~/Library/Keychains/build.keychain

        flutter build ipa --release --export-options-plist=ios/ExportOptions.plist

        echo "Locking keychain"
        security lock-keychain ~/Library/Keychains/build.keychain

    - name: Upload IPA artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-ipa
        path: ${{ env.PATH_TO_AAB }} # todo: cache this to use in a deploy job

    - name: Publishing app to TestFlight
      env:
        PP_APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
        PP_APPLE_ID_APP_SPECIFIC_PASS: ${{ secrets.APPLE_ID_APP_SPECIFIC_PASS }}
        PP_IPA_PATH: ${{ env.PATH_TO_AAB }}
      run: | # todo: may be migrated to fastlane supply? Use API key to upload
        xcrun altool --upload-app -t ios -f "$PP_IPA_PATH" -u "$PP_APPLE_ID_USERNAME" -p "$PP_APPLE_ID_APP_SPECIFIC_PASS"